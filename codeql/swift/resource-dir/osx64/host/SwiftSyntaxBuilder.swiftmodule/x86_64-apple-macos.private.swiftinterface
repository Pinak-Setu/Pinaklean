// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.9 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-macosx13.0 -enable-objc-interop -enable-library-evolution -module-link-name SwiftSyntaxBuilder -swift-version 5 -O -module-abi-name CompilerSwiftSyntaxBuilder -module-name SwiftSyntaxBuilder -package-name Toolchain
import Swift
import SwiftBasicFormat
import SwiftDiagnostics
@_spi(RawSyntax) @_spi(Testing) import SwiftParser
import SwiftParserDiagnostics
@_spi(RawSyntax) @_spi(ExperimentalLanguageFeatures) import SwiftSyntax
import _Concurrency
import _SwiftConcurrencyShims
extension SwiftSyntax.ArrayElementListSyntax {
  public init(expressions: [SwiftSyntax.ExprSyntax])
}
extension SwiftSyntax.ArrayExprSyntax {
  public init(expressions: [SwiftSyntax.ExprSyntax])
}
extension SwiftSyntax.AttributeSyntax {
  public init(_ attributeName: SwiftSyntax.TypeSyntax, @SwiftSyntaxBuilder.LabeledExprListBuilder argumentList: () -> SwiftSyntax.LabeledExprListSyntax? = { nil })
}
extension SwiftSyntax.BinaryOperatorExprSyntax {
  public init(text: Swift.String)
}
extension SwiftSyntax.BooleanLiteralExprSyntax {
  public init(_ value: Swift.Bool)
  public init(booleanLiteral value: Swift.Bool)
}
extension SwiftSyntax.BooleanLiteralExprSyntax : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension SwiftSyntax.CatchClauseSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia = [], _ catchItems: SwiftSyntax.CatchItemListSyntax, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () -> SwiftSyntax.CodeBlockItemListSyntax)
}
extension SwiftSyntax.DictionaryExprSyntax {
  public init(leftSquare: SwiftSyntax.TokenSyntax = .leftSquareToken(), rightSquare: SwiftSyntax.TokenSyntax = .rightSquareToken(), @SwiftSyntaxBuilder.DictionaryElementListBuilder contentBuilder: () -> SwiftSyntax.DictionaryElementListSyntax = {
      DictionaryElementListSyntax([])
    })
}
extension SwiftSyntax.ExprListSyntax {
  public init(_ elements: [any SwiftSyntax.ExprSyntaxProtocol])
}
extension SwiftSyntax.ExprSyntax {
  public init(literal: some ExpressibleByLiteralSyntax)
}
extension SwiftSyntax.FloatLiteralExprSyntax {
  public init(_ value: Swift.Float)
  public init(floatLiteral value: Swift.Float)
}
extension SwiftSyntax.FloatLiteralExprSyntax : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Float
}
extension SwiftSyntax.FunctionCallExprSyntax {
  public init(callee: some ExprSyntaxProtocol, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], @SwiftSyntaxBuilder.LabeledExprListBuilder argumentList: () -> SwiftSyntax.LabeledExprListSyntax = { [] })
}
extension SwiftSyntax.IntegerLiteralExprSyntax {
  public init(_ value: Swift.Int)
  public init(integerLiteral value: Swift.Int)
}
extension SwiftSyntax.IntegerLiteralExprSyntax : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension SwiftSyntax.LabeledExprSyntax {
  public init(label: Swift.String? = nil, expression: some ExprSyntaxProtocol)
}
extension SwiftSyntax.StringLiteralExprSyntax {
  public init(openDelimiter: SwiftSyntax.TokenSyntax? = nil, openingQuote: SwiftSyntax.TokenSyntax = .stringQuoteToken(), content: Swift.String, closingQuote: SwiftSyntax.TokenSyntax = .stringQuoteToken(), closeDelimiter: SwiftSyntax.TokenSyntax? = nil)
}
extension SwiftSyntax.UnexpectedNodesSyntax {
  public init(_ elements: [any SwiftSyntax.SyntaxProtocol])
}
extension SwiftSyntax.VariableDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia = [], attributes: SwiftSyntax.AttributeListSyntax = [], modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ bindingSpecifier: SwiftSyntax.Keyword, name: SwiftSyntax.PatternSyntax, type: SwiftSyntax.TypeAnnotationSyntax? = nil, initializer: SwiftSyntax.InitializerClauseSyntax? = nil, accessorBlock: SwiftSyntax.AccessorBlockSyntax? = nil)
}
public protocol DeclSyntaxParseable : SwiftSyntax.DeclSyntaxProtocol {
}
extension SwiftSyntaxBuilder.DeclSyntaxParseable {
  public init(_ stringInterpolation: SwiftSyntaxBuilder.SyntaxNodeString) throws
}
extension SwiftSyntax.ActorDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.AssociatedTypeDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.EnumCaseDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.ClassDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.DeinitializerDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.EnumDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.ExtensionDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.FunctionDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.ImportDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.InitializerDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.VariableDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.MacroDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.OperatorDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.MacroExpansionDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.PrecedenceGroupDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.ProtocolDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.StructDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.SubscriptDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.TypeAliasDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
@_hasMissingDesignatedInitializers @available(*, deprecated, message: "Use 'SyntaxProtocol.indented(by:)' from SwiftBasicFormat instead")
public class Indenter : SwiftSyntax.SyntaxRewriter {
  public static func indent<SyntaxType>(_ node: SyntaxType, indentation: SwiftSyntax.Trivia) -> SyntaxType where SyntaxType : SwiftSyntax.SyntaxProtocol
  override public func visit(_ token: SwiftSyntax.TokenSyntax) -> SwiftSyntax.TokenSyntax
  @objc deinit
}
public protocol ListBuilder {
  associatedtype FinalResult : SwiftSyntax.SyntaxCollection
  typealias Expression = Self.FinalResult.Element
  typealias Component = [Self.Expression]
  static func buildBlock(_ components: Self.Component...) -> Self.Component
  static func buildExpression(_ expression: Self.Expression) -> Self.Component
  static func buildExpression(_ expression: some Sequence<Expression>) -> Self.Component
  @_disfavoredOverload static func buildExpression(_ expression: Self.FinalResult) -> Self.Component
  static func buildOptional(_ component: Self.Component?) -> Self.Component
  static func buildEither(first component: Self.Component) -> Self.Component
  static func buildEither(second component: Self.Component) -> Self.Component
  static func buildArray(_ components: [Self.Component]) -> Self.Component
  static func buildLimitedAvailability(_ component: Self.Component) -> Self.Component
  static func buildFinalResult(_ component: Self.Component) -> Self.FinalResult
}
extension SwiftSyntaxBuilder.ListBuilder {
  public static func buildBlock(_ components: Self.Component...) -> Self.Component
  public static func buildExpression(_ expression: Self.Expression) -> Self.Component
  public static func buildExpression(_ expression: some Sequence<Expression>) -> Self.Component
  @_disfavoredOverload public static func buildExpression(_ expression: Self.FinalResult) -> Self.Component
  public static func buildOptional(_ component: Self.Component?) -> Self.Component
  public static func buildEither(first component: Self.Component) -> Self.Component
  public static func buildEither(second component: Self.Component) -> Self.Component
  public static func buildArray(_ components: [Self.Component]) -> Self.Component
  public static func buildLimitedAvailability(_ component: Self.Component) -> Self.Component
  public static func buildFinalResult(_ component: Self.Component) -> Self.FinalResult
}
extension SwiftSyntaxBuilder.ListBuilder where Self.FinalResult.Element : SwiftSyntax.WithTrailingCommaSyntax {
  public static func buildFinalResult(_ component: Self.Component) -> Self.FinalResult
}
extension SwiftSyntaxBuilder.CodeBlockItemListBuilder {
  public static func buildExpression(_ expression: some ExprSyntaxProtocol) -> SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component
  public static func buildExpression(_ expression: some Sequence<ExprSyntaxProtocol>) -> SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component
  public static func buildExpression(_ expression: some StmtSyntaxProtocol) -> SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component
  public static func buildExpression(_ expression: some Sequence<StmtSyntaxProtocol>) -> SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component
  public static func buildExpression(_ expression: some DeclSyntaxProtocol) -> SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component
  public static func buildExpression(_ expression: some Sequence<DeclSyntaxProtocol>) -> SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component) -> SwiftSyntax.CodeBlockItemListSyntax
}
extension SwiftSyntaxBuilder.ConditionElementListBuilder {
  public static func buildExpression(_ expression: some ExprSyntaxProtocol) -> SwiftSyntaxBuilder.ConditionElementListBuilder.Component
  public static func buildExpression(_ expression: some Sequence<ExprSyntaxProtocol>) -> SwiftSyntaxBuilder.ConditionElementListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.AvailabilityConditionSyntax) -> SwiftSyntaxBuilder.ConditionElementListBuilder.Component
  public static func buildExpression(_ expression: some Sequence<AvailabilityConditionSyntax>) -> SwiftSyntaxBuilder.ConditionElementListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.MatchingPatternConditionSyntax) -> SwiftSyntaxBuilder.ConditionElementListBuilder.Component
  public static func buildExpression(_ expression: some Sequence<MatchingPatternConditionSyntax>) -> SwiftSyntaxBuilder.ConditionElementListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.OptionalBindingConditionSyntax) -> SwiftSyntaxBuilder.ConditionElementListBuilder.Component
  public static func buildExpression(_ expression: some Sequence<OptionalBindingConditionSyntax>) -> SwiftSyntaxBuilder.ConditionElementListBuilder.Component
}
extension SwiftSyntaxBuilder.MemberBlockItemListBuilder {
  public static func buildExpression(_ expression: some DeclSyntaxProtocol) -> SwiftSyntaxBuilder.MemberBlockItemListBuilder.Component
  public static func buildExpression(_ expression: some Sequence<DeclSyntaxProtocol>) -> SwiftSyntaxBuilder.MemberBlockItemListBuilder.Component
}
extension SwiftSyntaxBuilder.ExprListBuilder {
  public static func buildExpression(_ expression: some ExprSyntaxProtocol) -> SwiftSyntaxBuilder.ExprListBuilder.Component
  public static func buildExpression(_ expression: some Sequence<ExprSyntaxProtocol>) -> SwiftSyntaxBuilder.ExprListBuilder.Component
}
extension SwiftSyntaxBuilder.UnexpectedNodesBuilder {
  public static func buildExpression(_ expression: some SyntaxProtocol) -> SwiftSyntaxBuilder.UnexpectedNodesBuilder.Component
  public static func buildExpression(_ expression: some Sequence<SyntaxProtocol>) -> SwiftSyntaxBuilder.UnexpectedNodesBuilder.Component
}
@available(*, deprecated, renamed: "ImportPathComponentListBuilder")
public typealias AccessPathBuilder = SwiftSyntaxBuilder.ImportPathComponentListBuilder
@available(*, deprecated, renamed: "LabeledExprListBuilder")
public typealias TupleExprElementListBuilder = SwiftSyntaxBuilder.LabeledExprListBuilder
public struct SyntaxStringInterpolation {
}
extension SwiftSyntaxBuilder.SyntaxStringInterpolation : Swift.StringInterpolationProtocol {
  public init(literalCapacity: Swift.Int, interpolationCount: Swift.Int)
  public mutating func appendLiteral(_ text: Swift.String)
  public mutating func appendInterpolation<Node>(_ node: Node) where Node : SwiftSyntax.SyntaxProtocol
  public mutating func appendInterpolation<Node>(_ node: Node?) where Node : SwiftSyntax.SyntaxProtocol
  public mutating func appendInterpolation<T>(raw value: T)
  public mutating func appendInterpolation<T>(_ type: T.Type)
  public mutating func appendInterpolation(_ buildable: some SyntaxProtocol, format: SwiftBasicFormat.BasicFormat = BasicFormat())
  public mutating func appendInterpolation(_ trivia: SwiftSyntax.Trivia)
  public mutating func appendInterpolation(literal value: some ExpressibleByLiteralSyntax, format: SwiftBasicFormat.BasicFormat = BasicFormat())
  public mutating func appendInterpolation<Literal>(literal value: Literal?, format: SwiftBasicFormat.BasicFormat = BasicFormat()) where Literal : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax
  public typealias StringLiteralType = Swift.String
}
public protocol SyntaxExpressibleByStringInterpolation : Swift.ExpressibleByStringInterpolation where Self.StringInterpolation == SwiftSyntaxBuilder.SyntaxStringInterpolation {
  init(stringInterpolation: SwiftSyntaxBuilder.SyntaxStringInterpolation)
}
public struct SyntaxStringInterpolationInvalidNodeTypeError : Swift.Error, Swift.CustomStringConvertible {
  public init<S>(expectedType: any SwiftSyntax.SyntaxProtocol.Type, actualNode: S) where S : SwiftSyntax.SyntaxProtocol
  public var description: Swift.String {
    get
  }
}
public protocol ExpressibleByLiteralSyntax {
  associatedtype LiteralType : SwiftSyntax.ExprSyntaxProtocol
  func makeLiteralSyntax() -> Self.LiteralType
}
extension SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public init(stringLiteral value: Swift.String)
}
extension Swift.Substring : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public func makeLiteralSyntax() -> SwiftSyntax.StringLiteralExprSyntax
  public typealias LiteralType = SwiftSyntax.StringLiteralExprSyntax
}
extension Swift.String : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public func makeLiteralSyntax() -> SwiftSyntax.StringLiteralExprSyntax
  public typealias LiteralType = SwiftSyntax.StringLiteralExprSyntax
}
extension SwiftSyntaxBuilder.ExpressibleByLiteralSyntax where Self : Swift.BinaryInteger {
  public func makeLiteralSyntax() -> SwiftSyntax.IntegerLiteralExprSyntax
}
extension Swift.Int : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.IntegerLiteralExprSyntax
}
extension Swift.Int8 : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.IntegerLiteralExprSyntax
}
extension Swift.Int16 : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.IntegerLiteralExprSyntax
}
extension Swift.Int32 : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.IntegerLiteralExprSyntax
}
extension Swift.Int64 : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.IntegerLiteralExprSyntax
}
extension Swift.UInt : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.IntegerLiteralExprSyntax
}
extension Swift.UInt8 : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.IntegerLiteralExprSyntax
}
extension Swift.UInt16 : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.IntegerLiteralExprSyntax
}
extension Swift.UInt32 : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.IntegerLiteralExprSyntax
}
extension Swift.UInt64 : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.IntegerLiteralExprSyntax
}
extension SwiftSyntaxBuilder.ExpressibleByLiteralSyntax where Self : Swift.FloatingPoint, Self : Swift.LosslessStringConvertible {
  public func makeLiteralSyntax() -> SwiftSyntax.ExprSyntax
}
extension Swift.Float : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.ExprSyntax
}
extension Swift.Double : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.ExprSyntax
}
extension Swift.Bool : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public func makeLiteralSyntax() -> SwiftSyntax.BooleanLiteralExprSyntax
  public typealias LiteralType = SwiftSyntax.BooleanLiteralExprSyntax
}
extension Swift.ArraySlice : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax where Element : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public func makeLiteralSyntax() -> SwiftSyntax.ArrayExprSyntax
  public typealias LiteralType = SwiftSyntax.ArrayExprSyntax
}
extension Swift.Array : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax where Element : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public func makeLiteralSyntax() -> SwiftSyntax.ArrayExprSyntax
  public typealias LiteralType = SwiftSyntax.ArrayExprSyntax
}
extension Swift.Set : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax where Element : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public func makeLiteralSyntax() -> SwiftSyntax.ArrayExprSyntax
  public typealias LiteralType = SwiftSyntax.ArrayExprSyntax
}
extension Swift.KeyValuePairs : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax where Key : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax, Value : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public func makeLiteralSyntax() -> SwiftSyntax.DictionaryExprSyntax
  public typealias LiteralType = SwiftSyntax.DictionaryExprSyntax
}
extension Swift.Dictionary : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax where Key : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax, Value : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public func makeLiteralSyntax() -> SwiftSyntax.DictionaryExprSyntax
  public typealias LiteralType = SwiftSyntax.DictionaryExprSyntax
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax where Wrapped : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public func makeLiteralSyntax() -> SwiftSyntax.ExprSyntax
  public typealias LiteralType = SwiftSyntax.ExprSyntax
}
#else
extension Swift.Optional : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax where Wrapped : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public func makeLiteralSyntax() -> SwiftSyntax.ExprSyntax
  public typealias LiteralType = SwiftSyntax.ExprSyntax
}
#endif
extension SwiftSyntax.TokenSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public init(stringInterpolation: SwiftSyntaxBuilder.SyntaxStringInterpolation)
}
extension SwiftSyntax.TokenSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringInterpolation = SwiftSyntaxBuilder.SyntaxStringInterpolation
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.Trivia {
  public init(stringInterpolation: Swift.String.StringInterpolation)
  public init(stringLiteral value: Swift.String)
}
extension SwiftSyntax.Trivia : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringInterpolation = Swift.String.StringInterpolation
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(*, deprecated, renamed: "SyntaxNodeString")
public typealias PartialSyntaxNodeString = SwiftSyntaxBuilder.SyntaxNodeString
public struct SyntaxNodeString : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public init(stringInterpolation: SwiftSyntaxBuilder.SyntaxStringInterpolation)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringInterpolation = SwiftSyntaxBuilder.SyntaxStringInterpolation
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntaxBuilder.SyntaxStringInterpolation {
  public mutating func appendInterpolation(_ value: SwiftSyntaxBuilder.SyntaxNodeString)
}
public protocol HasTrailingCodeBlock : SwiftSyntax.WithCodeBlockSyntax {
  init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax) rethrows
}
extension SwiftSyntaxBuilder.HasTrailingCodeBlock where Self : SwiftSyntax.StmtSyntaxProtocol {
  public init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax) throws
}
extension SwiftSyntax.CatchClauseSyntax : SwiftSyntaxBuilder.HasTrailingCodeBlock {
  public init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax) rethrows
}
extension SwiftSyntax.DeferStmtSyntax : SwiftSyntaxBuilder.HasTrailingCodeBlock {
}
extension SwiftSyntax.DoStmtSyntax : SwiftSyntaxBuilder.HasTrailingCodeBlock {
}
extension SwiftSyntax.ForStmtSyntax : SwiftSyntaxBuilder.HasTrailingCodeBlock {
}
extension SwiftSyntax.GuardStmtSyntax : SwiftSyntaxBuilder.HasTrailingCodeBlock {
}
extension SwiftSyntax.WhileStmtSyntax : SwiftSyntaxBuilder.HasTrailingCodeBlock {
}
extension SwiftSyntax.WithOptionalCodeBlockSyntax where Self : SwiftSyntax.DeclSyntaxProtocol {
  public init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax) throws
}
public protocol HasTrailingMemberDeclBlock {
  var memberBlock: SwiftSyntax.MemberBlockSyntax { get set }
  init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.MemberBlockItemListBuilder membersBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax) throws
}
extension SwiftSyntaxBuilder.HasTrailingMemberDeclBlock where Self : SwiftSyntax.DeclSyntaxProtocol {
  public init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.MemberBlockItemListBuilder membersBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax) throws
}
extension SwiftSyntax.ActorDeclSyntax : SwiftSyntaxBuilder.HasTrailingMemberDeclBlock {
}
extension SwiftSyntax.ClassDeclSyntax : SwiftSyntaxBuilder.HasTrailingMemberDeclBlock {
}
extension SwiftSyntax.EnumDeclSyntax : SwiftSyntaxBuilder.HasTrailingMemberDeclBlock {
}
extension SwiftSyntax.ExtensionDeclSyntax : SwiftSyntaxBuilder.HasTrailingMemberDeclBlock {
}
extension SwiftSyntax.ProtocolDeclSyntax : SwiftSyntaxBuilder.HasTrailingMemberDeclBlock {
}
extension SwiftSyntax.StructDeclSyntax : SwiftSyntaxBuilder.HasTrailingMemberDeclBlock {
}
extension SwiftSyntax.IfExprSyntax {
  public init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, @SwiftSyntaxBuilder.CodeBlockItemListBuilder else elseBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax? = { nil }) throws
  public init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, elseIf: SwiftSyntax.IfExprSyntax) throws
}
extension SwiftSyntax.SwitchCaseSyntax {
  public init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.CodeBlockItemListBuilder statementsBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax) rethrows
}
extension SwiftSyntax.SwitchExprSyntax {
  public init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.SwitchCaseListBuilder casesBuilder: () throws -> SwiftSyntax.SwitchCaseListSyntax = { SwitchCaseListSyntax([]) }) throws
}
extension SwiftSyntax.VariableDeclSyntax {
  public init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.CodeBlockItemListBuilder accessor: () throws -> SwiftSyntax.CodeBlockItemListSyntax) throws
}
@_spi(Testing) public func withStringInterpolationParsingErrorsSuppressed<T>(_ body: () throws -> T) rethrows -> T
extension SwiftParser.SyntaxParseable {
  public typealias StringInterpolation = SwiftSyntaxBuilder.SyntaxStringInterpolation
  public init(stringInterpolation: SwiftSyntaxBuilder.SyntaxStringInterpolation)
}
extension SwiftSyntax.SyntaxProtocol {
  public init(validating node: Self) throws
}
extension SwiftSyntax.Trivia {
  public init(validating trivia: SwiftSyntax.Trivia) throws
}
extension SwiftSyntax.AccessorDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifier: SwiftSyntax.DeclModifierSyntax? = nil, unexpectedBetweenModifierAndAccessorSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, accessorSpecifier: SwiftSyntax.TokenSyntax, unexpectedBetweenAccessorSpecifierAndParameters: SwiftSyntax.UnexpectedNodesSyntax? = nil, parameters: SwiftSyntax.AccessorParametersSyntax? = nil, unexpectedBetweenParametersAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, effectSpecifiers: SwiftSyntax.AccessorEffectSpecifiersSyntax? = nil, unexpectedBetweenEffectSpecifiersAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax?, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ActorDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndActorKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, actorKeyword: SwiftSyntax.TokenSyntax = .keyword(.actor), unexpectedBetweenActorKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder memberBlockBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ArrayExprSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftSquare: SwiftSyntax.TokenSyntax = .leftSquareToken(), unexpectedBetweenLeftSquareAndElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenElementsAndRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightSquare: SwiftSyntax.TokenSyntax = .rightSquareToken(), unexpectedAfterRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.ArrayElementListBuilder elementsBuilder: () throws -> SwiftSyntax.ArrayElementListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.CatchClauseSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeCatchKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, catchKeyword: SwiftSyntax.TokenSyntax = .keyword(.catch), unexpectedBetweenCatchKeywordAndCatchItems: SwiftSyntax.UnexpectedNodesSyntax? = nil, catchItems: SwiftSyntax.CatchItemListSyntax = [], unexpectedBetweenCatchItemsAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ClassDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndClassKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, classKeyword: SwiftSyntax.TokenSyntax = .keyword(.class), unexpectedBetweenClassKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder memberBlockBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ClosureCaptureClauseSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftSquare: SwiftSyntax.TokenSyntax = .leftSquareToken(), unexpectedBetweenLeftSquareAndItems: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenItemsAndRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightSquare: SwiftSyntax.TokenSyntax = .rightSquareToken(), unexpectedAfterRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.ClosureCaptureListBuilder itemsBuilder: () throws -> SwiftSyntax.ClosureCaptureListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ClosureExprSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBrace: SwiftSyntax.TokenSyntax = .leftBraceToken(), unexpectedBetweenLeftBraceAndSignature: SwiftSyntax.UnexpectedNodesSyntax? = nil, signature: SwiftSyntax.ClosureSignatureSyntax? = nil, unexpectedBetweenSignatureAndStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenStatementsAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBrace: SwiftSyntax.TokenSyntax = .rightBraceToken(), unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder statementsBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.CodeBlockSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBrace: SwiftSyntax.TokenSyntax = .leftBraceToken(), unexpectedBetweenLeftBraceAndStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenStatementsAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBrace: SwiftSyntax.TokenSyntax = .rightBraceToken(), unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder statementsBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.DeferStmtSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeDeferKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, deferKeyword: SwiftSyntax.TokenSyntax = .keyword(.defer), unexpectedBetweenDeferKeywordAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.DeinitializerDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndDeinitKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, deinitKeyword: SwiftSyntax.TokenSyntax = .keyword(.deinit), unexpectedBetweenDeinitKeywordAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, effectSpecifiers: SwiftSyntax.DeinitializerEffectSpecifiersSyntax? = nil, unexpectedBetweenEffectSpecifiersAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax?, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
@_spi(ExperimentalLanguageFeatures) extension SwiftSyntax.DoExprSyntax {
  @_spi(ExperimentalLanguageFeatures) public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeDoKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, doKeyword: SwiftSyntax.TokenSyntax = .keyword(.do), unexpectedBetweenDoKeywordAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenBodyAndCatchClauses: SwiftSyntax.UnexpectedNodesSyntax? = nil, catchClauses: SwiftSyntax.CatchClauseListSyntax = [], unexpectedAfterCatchClauses: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.DoStmtSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeDoKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, doKeyword: SwiftSyntax.TokenSyntax = .keyword(.do), unexpectedBetweenDoKeywordAndThrowsClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, throwsClause: SwiftSyntax.ThrowsClauseSyntax? = nil, unexpectedBetweenThrowsClauseAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenBodyAndCatchClauses: SwiftSyntax.UnexpectedNodesSyntax? = nil, catchClauses: SwiftSyntax.CatchClauseListSyntax = [], unexpectedAfterCatchClauses: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.EnumCaseDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndCaseKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, caseKeyword: SwiftSyntax.TokenSyntax = .keyword(.case), unexpectedBetweenCaseKeywordAndElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.EnumCaseElementListBuilder elementsBuilder: () throws -> SwiftSyntax.EnumCaseElementListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.EnumDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndEnumKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, enumKeyword: SwiftSyntax.TokenSyntax = .keyword(.enum), unexpectedBetweenEnumKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder memberBlockBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ExpressionSegmentSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeBackslash: SwiftSyntax.UnexpectedNodesSyntax? = nil, backslash: SwiftSyntax.TokenSyntax = .backslashToken(), unexpectedBetweenBackslashAndPounds: SwiftSyntax.UnexpectedNodesSyntax? = nil, pounds: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenPoundsAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), unexpectedBetweenLeftParenAndExpressions: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenExpressionsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder expressionsBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ExtensionDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndExtensionKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, extensionKeyword: SwiftSyntax.TokenSyntax = .keyword(.extension), unexpectedBetweenExtensionKeywordAndExtendedType: SwiftSyntax.UnexpectedNodesSyntax? = nil, extendedType: any SwiftSyntax.TypeSyntaxProtocol, unexpectedBetweenExtendedTypeAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder memberBlockBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ForStmtSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeForKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, forKeyword: SwiftSyntax.TokenSyntax = .keyword(.for), unexpectedBetweenForKeywordAndTryKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, tryKeyword: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenTryKeywordAndAwaitKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, awaitKeyword: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenAwaitKeywordAndCaseKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, caseKeyword: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenCaseKeywordAndPattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, pattern: any SwiftSyntax.PatternSyntaxProtocol, unexpectedBetweenPatternAndTypeAnnotation: SwiftSyntax.UnexpectedNodesSyntax? = nil, typeAnnotation: SwiftSyntax.TypeAnnotationSyntax? = nil, unexpectedBetweenTypeAnnotationAndInKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, inKeyword: SwiftSyntax.TokenSyntax = .keyword(.in), unexpectedBetweenInKeywordAndSequence: SwiftSyntax.UnexpectedNodesSyntax? = nil, sequence: any SwiftSyntax.ExprSyntaxProtocol, unexpectedBetweenSequenceAndWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, whereClause: SwiftSyntax.WhereClauseSyntax? = nil, unexpectedBetweenWhereClauseAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.FunctionCallExprSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeCalledExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, calledExpression: any SwiftSyntax.ExprSyntaxProtocol, unexpectedBetweenCalledExpressionAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenLeftParenAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenRightParenAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder argumentsBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.FunctionDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndFuncKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, funcKeyword: SwiftSyntax.TokenSyntax = .keyword(.func), unexpectedBetweenFuncKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, unexpectedBetweenGenericParameterClauseAndSignature: SwiftSyntax.UnexpectedNodesSyntax? = nil, signature: SwiftSyntax.FunctionSignatureSyntax, unexpectedBetweenSignatureAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax?, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.FunctionParameterClauseSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), unexpectedBetweenLeftParenAndParameters: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenParametersAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.FunctionParameterListBuilder parametersBuilder: () throws -> SwiftSyntax.FunctionParameterListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.GenericArgumentClauseSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftAngle: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftAngle: SwiftSyntax.TokenSyntax = .leftAngleToken(), unexpectedBetweenLeftAngleAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentsAndRightAngle: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightAngle: SwiftSyntax.TokenSyntax = .rightAngleToken(), unexpectedAfterRightAngle: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.GenericArgumentListBuilder argumentsBuilder: () throws -> SwiftSyntax.GenericArgumentListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.GenericParameterClauseSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftAngle: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftAngle: SwiftSyntax.TokenSyntax = .leftAngleToken(), unexpectedBetweenLeftAngleAndParameters: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenParametersAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndRightAngle: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightAngle: SwiftSyntax.TokenSyntax = .rightAngleToken(), unexpectedAfterRightAngle: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.GenericParameterListBuilder parametersBuilder: () throws -> SwiftSyntax.GenericParameterListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.GenericWhereClauseSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeWhereKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, whereKeyword: SwiftSyntax.TokenSyntax = .keyword(.where), unexpectedBetweenWhereKeywordAndRequirements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterRequirements: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.GenericRequirementListBuilder requirementsBuilder: () throws -> SwiftSyntax.GenericRequirementListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.GuardStmtSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeGuardKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, guardKeyword: SwiftSyntax.TokenSyntax = .keyword(.guard), unexpectedBetweenGuardKeywordAndConditions: SwiftSyntax.UnexpectedNodesSyntax? = nil, conditions: SwiftSyntax.ConditionElementListSyntax, unexpectedBetweenConditionsAndElseKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, elseKeyword: SwiftSyntax.TokenSyntax = .keyword(.else), unexpectedBetweenElseKeywordAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.IfExprSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeIfKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, ifKeyword: SwiftSyntax.TokenSyntax = .keyword(.if), unexpectedBetweenIfKeywordAndConditions: SwiftSyntax.UnexpectedNodesSyntax? = nil, conditions: SwiftSyntax.ConditionElementListSyntax, unexpectedBetweenConditionsAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenBodyAndElseKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, elseKeyword: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenElseKeywordAndElseBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, elseBody: SwiftSyntax.IfExprSyntax.ElseBody? = nil, unexpectedAfterElseBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.InheritanceClauseSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), unexpectedBetweenColonAndInheritedTypes: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterInheritedTypes: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.InheritedTypeListBuilder inheritedTypesBuilder: () throws -> SwiftSyntax.InheritedTypeListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.InitializerDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndInitKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, initKeyword: SwiftSyntax.TokenSyntax = .keyword(.`init`), unexpectedBetweenInitKeywordAndOptionalMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, optionalMark: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenOptionalMarkAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, unexpectedBetweenGenericParameterClauseAndSignature: SwiftSyntax.UnexpectedNodesSyntax? = nil, signature: SwiftSyntax.FunctionSignatureSyntax, unexpectedBetweenSignatureAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax?, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.KeyPathSubscriptComponentSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftSquare: SwiftSyntax.TokenSyntax = .leftSquareToken(), unexpectedBetweenLeftSquareAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentsAndRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightSquare: SwiftSyntax.TokenSyntax = .rightSquareToken(), unexpectedAfterRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder argumentsBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.MacroExpansionDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndPound: SwiftSyntax.UnexpectedNodesSyntax? = nil, pound: SwiftSyntax.TokenSyntax = .poundToken(), unexpectedBetweenPoundAndMacroName: SwiftSyntax.UnexpectedNodesSyntax? = nil, macroName: SwiftSyntax.TokenSyntax, unexpectedBetweenMacroNameAndGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax? = nil, unexpectedBetweenGenericArgumentClauseAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenLeftParenAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenRightParenAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder argumentsBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.MacroExpansionExprSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforePound: SwiftSyntax.UnexpectedNodesSyntax? = nil, pound: SwiftSyntax.TokenSyntax = .poundToken(), unexpectedBetweenPoundAndMacroName: SwiftSyntax.UnexpectedNodesSyntax? = nil, macroName: SwiftSyntax.TokenSyntax, unexpectedBetweenMacroNameAndGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax? = nil, unexpectedBetweenGenericArgumentClauseAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenLeftParenAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenRightParenAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder argumentsBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.MemberBlockSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBrace: SwiftSyntax.TokenSyntax = .leftBraceToken(), unexpectedBetweenLeftBraceAndMembers: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenMembersAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBrace: SwiftSyntax.TokenSyntax = .rightBraceToken(), unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder membersBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ProtocolDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndProtocolKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, protocolKeyword: SwiftSyntax.TokenSyntax = .keyword(.protocol), unexpectedBetweenProtocolKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, unexpectedBetweenNameAndPrimaryAssociatedTypeClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, primaryAssociatedTypeClause: SwiftSyntax.PrimaryAssociatedTypeClauseSyntax? = nil, unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder memberBlockBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.RepeatStmtSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeRepeatKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, repeatKeyword: SwiftSyntax.TokenSyntax = .keyword(.repeat), unexpectedBetweenRepeatKeywordAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenBodyAndWhileKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, whileKeyword: SwiftSyntax.TokenSyntax = .keyword(.while), unexpectedBetweenWhileKeywordAndCondition: SwiftSyntax.UnexpectedNodesSyntax? = nil, condition: any SwiftSyntax.ExprSyntaxProtocol, unexpectedAfterCondition: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.SequenceExprSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.ExprListBuilder elementsBuilder: () throws -> SwiftSyntax.ExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.SourceFileSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeShebang: SwiftSyntax.UnexpectedNodesSyntax? = nil, shebang: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenShebangAndStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenStatementsAndEndOfFileToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, endOfFileToken: SwiftSyntax.TokenSyntax = .endOfFileToken(), unexpectedAfterEndOfFileToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder statementsBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.StructDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndStructKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, structKeyword: SwiftSyntax.TokenSyntax = .keyword(.struct), unexpectedBetweenStructKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder memberBlockBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.SubscriptCallExprSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeCalledExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, calledExpression: any SwiftSyntax.ExprSyntaxProtocol, unexpectedBetweenCalledExpressionAndLeftSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftSquare: SwiftSyntax.TokenSyntax = .leftSquareToken(), unexpectedBetweenLeftSquareAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentsAndRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightSquare: SwiftSyntax.TokenSyntax = .rightSquareToken(), unexpectedBetweenRightSquareAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder argumentsBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.SwitchCaseLabelSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeCaseKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, caseKeyword: SwiftSyntax.TokenSyntax = .keyword(.case), unexpectedBetweenCaseKeywordAndCaseItems: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenCaseItemsAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), unexpectedAfterColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.SwitchCaseItemListBuilder caseItemsBuilder: () throws -> SwiftSyntax.SwitchCaseItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.SwitchCaseSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttribute: SwiftSyntax.UnexpectedNodesSyntax? = nil, attribute: SwiftSyntax.AttributeSyntax? = nil, unexpectedBetweenAttributeAndLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, label: SwiftSyntax.SwitchCaseSyntax.Label, unexpectedBetweenLabelAndStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder statementsBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.SwitchExprSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeSwitchKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, switchKeyword: SwiftSyntax.TokenSyntax = .keyword(.switch), unexpectedBetweenSwitchKeywordAndSubject: SwiftSyntax.UnexpectedNodesSyntax? = nil, subject: any SwiftSyntax.ExprSyntaxProtocol, unexpectedBetweenSubjectAndLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBrace: SwiftSyntax.TokenSyntax = .leftBraceToken(), unexpectedBetweenLeftBraceAndCases: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenCasesAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBrace: SwiftSyntax.TokenSyntax = .rightBraceToken(), unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.SwitchCaseListBuilder casesBuilder: () throws -> SwiftSyntax.SwitchCaseListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.TupleExprSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), unexpectedBetweenLeftParenAndElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenElementsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder elementsBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.TuplePatternSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), unexpectedBetweenLeftParenAndElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenElementsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.TuplePatternElementListBuilder elementsBuilder: () throws -> SwiftSyntax.TuplePatternElementListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.VariableDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndBindingSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, bindingSpecifier: SwiftSyntax.TokenSyntax, unexpectedBetweenBindingSpecifierAndBindings: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBindings: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.PatternBindingListBuilder bindingsBuilder: () throws -> SwiftSyntax.PatternBindingListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.WhileStmtSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeWhileKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, whileKeyword: SwiftSyntax.TokenSyntax = .keyword(.while), unexpectedBetweenWhileKeywordAndConditions: SwiftSyntax.UnexpectedNodesSyntax? = nil, conditions: SwiftSyntax.ConditionElementListSyntax, unexpectedBetweenConditionsAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
@_functionBuilder public struct AccessorDeclListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.AccessorDeclListSyntax
}
extension SwiftSyntax.AccessorDeclListSyntax {
  public init(@SwiftSyntaxBuilder.AccessorDeclListBuilder itemsBuilder: () throws -> SwiftSyntax.AccessorDeclListSyntax) rethrows
}
@_functionBuilder public struct ArrayElementListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.ArrayElementListSyntax
}
extension SwiftSyntax.ArrayElementListSyntax {
  public init(@SwiftSyntaxBuilder.ArrayElementListBuilder itemsBuilder: () throws -> SwiftSyntax.ArrayElementListSyntax) rethrows
}
@_functionBuilder public struct AttributeListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.AttributeListSyntax
  public static func buildExpression(_ expression: SwiftSyntax.AttributeSyntax) -> SwiftSyntaxBuilder.AttributeListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.IfConfigDeclSyntax) -> SwiftSyntaxBuilder.AttributeListBuilder.Component
}
extension SwiftSyntax.AttributeListSyntax {
  public init(@SwiftSyntaxBuilder.AttributeListBuilder itemsBuilder: () throws -> SwiftSyntax.AttributeListSyntax) rethrows
}
@_functionBuilder public struct AvailabilityArgumentListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.AvailabilityArgumentListSyntax
}
extension SwiftSyntax.AvailabilityArgumentListSyntax {
  public init(@SwiftSyntaxBuilder.AvailabilityArgumentListBuilder itemsBuilder: () throws -> SwiftSyntax.AvailabilityArgumentListSyntax) rethrows
}
@_functionBuilder public struct CatchClauseListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.CatchClauseListSyntax
}
extension SwiftSyntax.CatchClauseListSyntax {
  public init(@SwiftSyntaxBuilder.CatchClauseListBuilder itemsBuilder: () throws -> SwiftSyntax.CatchClauseListSyntax) rethrows
}
@_functionBuilder public struct CatchItemListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.CatchItemListSyntax
}
extension SwiftSyntax.CatchItemListSyntax {
  public init(@SwiftSyntaxBuilder.CatchItemListBuilder itemsBuilder: () throws -> SwiftSyntax.CatchItemListSyntax) rethrows
}
@_functionBuilder public struct ClosureCaptureListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.ClosureCaptureListSyntax
}
extension SwiftSyntax.ClosureCaptureListSyntax {
  public init(@SwiftSyntaxBuilder.ClosureCaptureListBuilder itemsBuilder: () throws -> SwiftSyntax.ClosureCaptureListSyntax) rethrows
}
@_functionBuilder public struct ClosureParameterListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.ClosureParameterListSyntax
}
extension SwiftSyntax.ClosureParameterListSyntax {
  public init(@SwiftSyntaxBuilder.ClosureParameterListBuilder itemsBuilder: () throws -> SwiftSyntax.ClosureParameterListSyntax) rethrows
}
@_functionBuilder public struct ClosureShorthandParameterListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.ClosureShorthandParameterListSyntax
}
extension SwiftSyntax.ClosureShorthandParameterListSyntax {
  public init(@SwiftSyntaxBuilder.ClosureShorthandParameterListBuilder itemsBuilder: () throws -> SwiftSyntax.ClosureShorthandParameterListSyntax) rethrows
}
@_functionBuilder public struct CodeBlockItemListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.CodeBlockItemListSyntax
}
extension SwiftSyntax.CodeBlockItemListSyntax {
  public init(@SwiftSyntaxBuilder.CodeBlockItemListBuilder itemsBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax) rethrows
}
@_functionBuilder public struct CompositionTypeElementListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.CompositionTypeElementListSyntax
}
extension SwiftSyntax.CompositionTypeElementListSyntax {
  public init(@SwiftSyntaxBuilder.CompositionTypeElementListBuilder itemsBuilder: () throws -> SwiftSyntax.CompositionTypeElementListSyntax) rethrows
}
@_functionBuilder public struct ConditionElementListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.ConditionElementListSyntax
}
extension SwiftSyntax.ConditionElementListSyntax {
  public init(@SwiftSyntaxBuilder.ConditionElementListBuilder itemsBuilder: () throws -> SwiftSyntax.ConditionElementListSyntax) rethrows
}
@_functionBuilder public struct DeclModifierListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.DeclModifierListSyntax
}
extension SwiftSyntax.DeclModifierListSyntax {
  public init(@SwiftSyntaxBuilder.DeclModifierListBuilder itemsBuilder: () throws -> SwiftSyntax.DeclModifierListSyntax) rethrows
}
@_functionBuilder public struct DeclNameArgumentListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.DeclNameArgumentListSyntax
}
extension SwiftSyntax.DeclNameArgumentListSyntax {
  public init(@SwiftSyntaxBuilder.DeclNameArgumentListBuilder itemsBuilder: () throws -> SwiftSyntax.DeclNameArgumentListSyntax) rethrows
}
@_functionBuilder public struct DesignatedTypeListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.DesignatedTypeListSyntax
}
extension SwiftSyntax.DesignatedTypeListSyntax {
  public init(@SwiftSyntaxBuilder.DesignatedTypeListBuilder itemsBuilder: () throws -> SwiftSyntax.DesignatedTypeListSyntax) rethrows
}
@_functionBuilder public struct DictionaryElementListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.DictionaryElementListSyntax
}
extension SwiftSyntax.DictionaryElementListSyntax {
  public init(@SwiftSyntaxBuilder.DictionaryElementListBuilder itemsBuilder: () throws -> SwiftSyntax.DictionaryElementListSyntax) rethrows
}
@_functionBuilder public struct DifferentiabilityArgumentListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.DifferentiabilityArgumentListSyntax
}
extension SwiftSyntax.DifferentiabilityArgumentListSyntax {
  public init(@SwiftSyntaxBuilder.DifferentiabilityArgumentListBuilder itemsBuilder: () throws -> SwiftSyntax.DifferentiabilityArgumentListSyntax) rethrows
}
@_functionBuilder public struct DocumentationAttributeArgumentListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.DocumentationAttributeArgumentListSyntax
}
extension SwiftSyntax.DocumentationAttributeArgumentListSyntax {
  public init(@SwiftSyntaxBuilder.DocumentationAttributeArgumentListBuilder itemsBuilder: () throws -> SwiftSyntax.DocumentationAttributeArgumentListSyntax) rethrows
}
@_functionBuilder public struct EffectsAttributeArgumentListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.EffectsAttributeArgumentListSyntax
}
extension SwiftSyntax.EffectsAttributeArgumentListSyntax {
  public init(@SwiftSyntaxBuilder.EffectsAttributeArgumentListBuilder itemsBuilder: () throws -> SwiftSyntax.EffectsAttributeArgumentListSyntax) rethrows
}
@_functionBuilder public struct EnumCaseElementListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.EnumCaseElementListSyntax
}
extension SwiftSyntax.EnumCaseElementListSyntax {
  public init(@SwiftSyntaxBuilder.EnumCaseElementListBuilder itemsBuilder: () throws -> SwiftSyntax.EnumCaseElementListSyntax) rethrows
}
@_functionBuilder public struct EnumCaseParameterListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.EnumCaseParameterListSyntax
}
extension SwiftSyntax.EnumCaseParameterListSyntax {
  public init(@SwiftSyntaxBuilder.EnumCaseParameterListBuilder itemsBuilder: () throws -> SwiftSyntax.EnumCaseParameterListSyntax) rethrows
}
@_functionBuilder public struct ExprListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.ExprListSyntax
}
extension SwiftSyntax.ExprListSyntax {
  public init(@SwiftSyntaxBuilder.ExprListBuilder itemsBuilder: () throws -> SwiftSyntax.ExprListSyntax) rethrows
}
@_functionBuilder public struct FunctionParameterListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.FunctionParameterListSyntax
}
extension SwiftSyntax.FunctionParameterListSyntax {
  public init(@SwiftSyntaxBuilder.FunctionParameterListBuilder itemsBuilder: () throws -> SwiftSyntax.FunctionParameterListSyntax) rethrows
}
@_functionBuilder public struct GenericArgumentListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.GenericArgumentListSyntax
}
extension SwiftSyntax.GenericArgumentListSyntax {
  public init(@SwiftSyntaxBuilder.GenericArgumentListBuilder itemsBuilder: () throws -> SwiftSyntax.GenericArgumentListSyntax) rethrows
}
@_functionBuilder public struct GenericParameterListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.GenericParameterListSyntax
}
extension SwiftSyntax.GenericParameterListSyntax {
  public init(@SwiftSyntaxBuilder.GenericParameterListBuilder itemsBuilder: () throws -> SwiftSyntax.GenericParameterListSyntax) rethrows
}
@_functionBuilder public struct GenericRequirementListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.GenericRequirementListSyntax
}
extension SwiftSyntax.GenericRequirementListSyntax {
  public init(@SwiftSyntaxBuilder.GenericRequirementListBuilder itemsBuilder: () throws -> SwiftSyntax.GenericRequirementListSyntax) rethrows
}
@_functionBuilder public struct IfConfigClauseListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.IfConfigClauseListSyntax
}
extension SwiftSyntax.IfConfigClauseListSyntax {
  public init(@SwiftSyntaxBuilder.IfConfigClauseListBuilder itemsBuilder: () throws -> SwiftSyntax.IfConfigClauseListSyntax) rethrows
}
@_functionBuilder public struct ImportPathComponentListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.ImportPathComponentListSyntax
}
extension SwiftSyntax.ImportPathComponentListSyntax {
  public init(@SwiftSyntaxBuilder.ImportPathComponentListBuilder itemsBuilder: () throws -> SwiftSyntax.ImportPathComponentListSyntax) rethrows
}
@_functionBuilder public struct InheritedTypeListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.InheritedTypeListSyntax
}
extension SwiftSyntax.InheritedTypeListSyntax {
  public init(@SwiftSyntaxBuilder.InheritedTypeListBuilder itemsBuilder: () throws -> SwiftSyntax.InheritedTypeListSyntax) rethrows
}
@_functionBuilder public struct KeyPathComponentListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.KeyPathComponentListSyntax
}
extension SwiftSyntax.KeyPathComponentListSyntax {
  public init(@SwiftSyntaxBuilder.KeyPathComponentListBuilder itemsBuilder: () throws -> SwiftSyntax.KeyPathComponentListSyntax) rethrows
}
@_functionBuilder public struct LabeledExprListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.LabeledExprListSyntax
}
extension SwiftSyntax.LabeledExprListSyntax {
  public init(@SwiftSyntaxBuilder.LabeledExprListBuilder itemsBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax) rethrows
}
@_spi(ExperimentalLanguageFeatures) @_functionBuilder public struct LifetimeSpecifierArgumentListBuilder : SwiftSyntaxBuilder.ListBuilder {
  @_spi(ExperimentalLanguageFeatures) public typealias FinalResult = SwiftSyntax.LifetimeSpecifierArgumentListSyntax
}
@_spi(ExperimentalLanguageFeatures) extension SwiftSyntax.LifetimeSpecifierArgumentListSyntax {
  @_spi(ExperimentalLanguageFeatures) public init(@SwiftSyntaxBuilder.LifetimeSpecifierArgumentListBuilder itemsBuilder: () throws -> SwiftSyntax.LifetimeSpecifierArgumentListSyntax) rethrows
}
@_functionBuilder public struct MemberBlockItemListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.MemberBlockItemListSyntax
}
extension SwiftSyntax.MemberBlockItemListSyntax {
  public init(@SwiftSyntaxBuilder.MemberBlockItemListBuilder itemsBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax) rethrows
}
@_functionBuilder public struct MultipleTrailingClosureElementListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.MultipleTrailingClosureElementListSyntax
}
extension SwiftSyntax.MultipleTrailingClosureElementListSyntax {
  public init(@SwiftSyntaxBuilder.MultipleTrailingClosureElementListBuilder itemsBuilder: () throws -> SwiftSyntax.MultipleTrailingClosureElementListSyntax) rethrows
}
@_functionBuilder public struct ObjCSelectorPieceListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.ObjCSelectorPieceListSyntax
}
extension SwiftSyntax.ObjCSelectorPieceListSyntax {
  public init(@SwiftSyntaxBuilder.ObjCSelectorPieceListBuilder itemsBuilder: () throws -> SwiftSyntax.ObjCSelectorPieceListSyntax) rethrows
}
@_functionBuilder public struct PatternBindingListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.PatternBindingListSyntax
}
extension SwiftSyntax.PatternBindingListSyntax {
  public init(@SwiftSyntaxBuilder.PatternBindingListBuilder itemsBuilder: () throws -> SwiftSyntax.PatternBindingListSyntax) rethrows
}
@_functionBuilder public struct PlatformVersionItemListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.PlatformVersionItemListSyntax
}
extension SwiftSyntax.PlatformVersionItemListSyntax {
  public init(@SwiftSyntaxBuilder.PlatformVersionItemListBuilder itemsBuilder: () throws -> SwiftSyntax.PlatformVersionItemListSyntax) rethrows
}
@_functionBuilder public struct PrecedenceGroupAttributeListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.PrecedenceGroupAttributeListSyntax
  public static func buildExpression(_ expression: SwiftSyntax.PrecedenceGroupRelationSyntax) -> SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.PrecedenceGroupAssignmentSyntax) -> SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.PrecedenceGroupAssociativitySyntax) -> SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Component
}
extension SwiftSyntax.PrecedenceGroupAttributeListSyntax {
  public init(@SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder itemsBuilder: () throws -> SwiftSyntax.PrecedenceGroupAttributeListSyntax) rethrows
}
@_functionBuilder public struct PrecedenceGroupNameListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.PrecedenceGroupNameListSyntax
}
extension SwiftSyntax.PrecedenceGroupNameListSyntax {
  public init(@SwiftSyntaxBuilder.PrecedenceGroupNameListBuilder itemsBuilder: () throws -> SwiftSyntax.PrecedenceGroupNameListSyntax) rethrows
}
@_functionBuilder public struct PrimaryAssociatedTypeListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.PrimaryAssociatedTypeListSyntax
}
extension SwiftSyntax.PrimaryAssociatedTypeListSyntax {
  public init(@SwiftSyntaxBuilder.PrimaryAssociatedTypeListBuilder itemsBuilder: () throws -> SwiftSyntax.PrimaryAssociatedTypeListSyntax) rethrows
}
@_functionBuilder public struct SimpleStringLiteralSegmentListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.SimpleStringLiteralSegmentListSyntax
}
extension SwiftSyntax.SimpleStringLiteralSegmentListSyntax {
  public init(@SwiftSyntaxBuilder.SimpleStringLiteralSegmentListBuilder itemsBuilder: () throws -> SwiftSyntax.SimpleStringLiteralSegmentListSyntax) rethrows
}
@_functionBuilder public struct SpecializeAttributeArgumentListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.SpecializeAttributeArgumentListSyntax
  public static func buildExpression(_ expression: SwiftSyntax.LabeledSpecializeArgumentSyntax) -> SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.SpecializeAvailabilityArgumentSyntax) -> SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.SpecializeTargetFunctionArgumentSyntax) -> SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.GenericWhereClauseSyntax) -> SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component
}
extension SwiftSyntax.SpecializeAttributeArgumentListSyntax {
  public init(@SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder itemsBuilder: () throws -> SwiftSyntax.SpecializeAttributeArgumentListSyntax) rethrows
}
@_functionBuilder public struct StringLiteralSegmentListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.StringLiteralSegmentListSyntax
  public static func buildExpression(_ expression: SwiftSyntax.StringSegmentSyntax) -> SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.ExpressionSegmentSyntax) -> SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.Component
}
extension SwiftSyntax.StringLiteralSegmentListSyntax {
  public init(@SwiftSyntaxBuilder.StringLiteralSegmentListBuilder itemsBuilder: () throws -> SwiftSyntax.StringLiteralSegmentListSyntax) rethrows
}
@_functionBuilder public struct SwitchCaseItemListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.SwitchCaseItemListSyntax
}
extension SwiftSyntax.SwitchCaseItemListSyntax {
  public init(@SwiftSyntaxBuilder.SwitchCaseItemListBuilder itemsBuilder: () throws -> SwiftSyntax.SwitchCaseItemListSyntax) rethrows
}
@_functionBuilder public struct SwitchCaseListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.SwitchCaseListSyntax
  public static func buildExpression(_ expression: SwiftSyntax.SwitchCaseSyntax) -> SwiftSyntaxBuilder.SwitchCaseListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.IfConfigDeclSyntax) -> SwiftSyntaxBuilder.SwitchCaseListBuilder.Component
}
extension SwiftSyntax.SwitchCaseListSyntax {
  public init(@SwiftSyntaxBuilder.SwitchCaseListBuilder itemsBuilder: () throws -> SwiftSyntax.SwitchCaseListSyntax) rethrows
}
@_functionBuilder public struct TuplePatternElementListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.TuplePatternElementListSyntax
}
extension SwiftSyntax.TuplePatternElementListSyntax {
  public init(@SwiftSyntaxBuilder.TuplePatternElementListBuilder itemsBuilder: () throws -> SwiftSyntax.TuplePatternElementListSyntax) rethrows
}
@_functionBuilder public struct TupleTypeElementListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.TupleTypeElementListSyntax
}
extension SwiftSyntax.TupleTypeElementListSyntax {
  public init(@SwiftSyntaxBuilder.TupleTypeElementListBuilder itemsBuilder: () throws -> SwiftSyntax.TupleTypeElementListSyntax) rethrows
}
@_functionBuilder public struct TypeSpecifierListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.TypeSpecifierListSyntax
  public static func buildExpression(_ expression: SwiftSyntax.SimpleTypeSpecifierSyntax) -> SwiftSyntaxBuilder.TypeSpecifierListBuilder.Component
  @_spi(ExperimentalLanguageFeatures) public static func buildExpression(_ expression: SwiftSyntax.LifetimeTypeSpecifierSyntax) -> SwiftSyntaxBuilder.TypeSpecifierListBuilder.Component
}
extension SwiftSyntax.TypeSpecifierListSyntax {
  public init(@SwiftSyntaxBuilder.TypeSpecifierListBuilder itemsBuilder: () throws -> SwiftSyntax.TypeSpecifierListSyntax) rethrows
}
@_functionBuilder public struct UnexpectedNodesBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.UnexpectedNodesSyntax
}
extension SwiftSyntax.UnexpectedNodesSyntax {
  public init(@SwiftSyntaxBuilder.UnexpectedNodesBuilder itemsBuilder: () throws -> SwiftSyntax.UnexpectedNodesSyntax) rethrows
}
@_functionBuilder public struct VersionComponentListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.VersionComponentListSyntax
}
extension SwiftSyntax.VersionComponentListSyntax {
  public init(@SwiftSyntaxBuilder.VersionComponentListBuilder itemsBuilder: () throws -> SwiftSyntax.VersionComponentListSyntax) rethrows
}
@_functionBuilder public struct YieldedExpressionListBuilder : SwiftSyntaxBuilder.ListBuilder {
  public typealias FinalResult = SwiftSyntax.YieldedExpressionListSyntax
}
extension SwiftSyntax.YieldedExpressionListSyntax {
  public init(@SwiftSyntaxBuilder.YieldedExpressionListBuilder itemsBuilder: () throws -> SwiftSyntax.YieldedExpressionListSyntax) rethrows
}
extension SwiftSyntax.AccessorDeclSyntax {
  @available(*, deprecated, message: "Use an initializer with accessorSpecifier, parameters argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifier: SwiftSyntax.DeclModifierSyntax? = nil, unexpectedBetweenModifierAndAccessorKind: SwiftSyntax.UnexpectedNodesSyntax? = nil, accessorKind: SwiftSyntax.TokenSyntax, unexpectedBetweenAccessorKindAndParameter: SwiftSyntax.UnexpectedNodesSyntax? = nil, parameter: SwiftSyntax.AccessorParametersSyntax? = nil, unexpectedBetweenParameterAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, effectSpecifiers: SwiftSyntax.AccessorEffectSpecifiersSyntax? = nil, unexpectedBetweenEffectSpecifiersAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax?, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ActorDeclSyntax {
  @available(*, deprecated, message: "Use an initializer with name argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndActorKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, actorKeyword: SwiftSyntax.TokenSyntax = .keyword(.actor), unexpectedBetweenActorKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, unexpectedBetweenIdentifierAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder memberBlockBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ArrayExprSyntax {
  @available(*, deprecated, message: "Use an initializer with leftSquare, rightSquare argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftSquareBracket: SwiftSyntax.TokenSyntax = .leftSquareToken(), unexpectedBetweenLeftSquareBracketAndElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenElementsAndRightSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightSquareBracket: SwiftSyntax.TokenSyntax = .rightSquareToken(), unexpectedAfterRightSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.ArrayElementListBuilder elementsBuilder: () throws -> SwiftSyntax.ArrayElementListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ClassDeclSyntax {
  @available(*, deprecated, message: "Use an initializer with name argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndClassKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, classKeyword: SwiftSyntax.TokenSyntax = .keyword(.class), unexpectedBetweenClassKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, unexpectedBetweenIdentifierAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder memberBlockBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.EnumDeclSyntax {
  @available(*, deprecated, message: "Use an initializer with name, genericParameterClause argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndEnumKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, enumKeyword: SwiftSyntax.TokenSyntax = .keyword(.enum), unexpectedBetweenEnumKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, unexpectedBetweenIdentifierAndGenericParameters: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameters: SwiftSyntax.GenericParameterClauseSyntax? = nil, unexpectedBetweenGenericParametersAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder memberBlockBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ExpressionSegmentSyntax {
  @available(*, deprecated, message: "Use an initializer with pounds argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeBackslash: SwiftSyntax.UnexpectedNodesSyntax? = nil, backslash: SwiftSyntax.TokenSyntax = .backslashToken(), unexpectedBetweenBackslashAndDelimiter: SwiftSyntax.UnexpectedNodesSyntax? = nil, delimiter: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenDelimiterAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), unexpectedBetweenLeftParenAndExpressions: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenExpressionsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder expressionsBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ForStmtSyntax {
  @available(*, deprecated, message: "Use an initializer with sequence argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeForKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, forKeyword: SwiftSyntax.TokenSyntax = .keyword(.for), unexpectedBetweenForKeywordAndTryKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, tryKeyword: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenTryKeywordAndAwaitKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, awaitKeyword: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenAwaitKeywordAndCaseKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, caseKeyword: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenCaseKeywordAndPattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, pattern: any SwiftSyntax.PatternSyntaxProtocol, unexpectedBetweenPatternAndTypeAnnotation: SwiftSyntax.UnexpectedNodesSyntax? = nil, typeAnnotation: SwiftSyntax.TypeAnnotationSyntax? = nil, unexpectedBetweenTypeAnnotationAndInKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, inKeyword: SwiftSyntax.TokenSyntax = .keyword(.in), unexpectedBetweenInKeywordAndSequenceExpr: SwiftSyntax.UnexpectedNodesSyntax? = nil, sequenceExpr: any SwiftSyntax.ExprSyntaxProtocol, unexpectedBetweenSequenceExprAndWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, whereClause: SwiftSyntax.WhereClauseSyntax? = nil, unexpectedBetweenWhereClauseAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.FunctionCallExprSyntax {
  @available(*, deprecated, message: "Use an initializer with arguments argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeCalledExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, calledExpression: any SwiftSyntax.ExprSyntaxProtocol, unexpectedBetweenCalledExpressionAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenLeftParenAndArgumentList: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenRightParenAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder argumentListBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.FunctionDeclSyntax {
  @available(*, deprecated, message: "Use an initializer with name argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndFuncKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, funcKeyword: SwiftSyntax.TokenSyntax = .keyword(.func), unexpectedBetweenFuncKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, unexpectedBetweenIdentifierAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, unexpectedBetweenGenericParameterClauseAndSignature: SwiftSyntax.UnexpectedNodesSyntax? = nil, signature: SwiftSyntax.FunctionSignatureSyntax, unexpectedBetweenSignatureAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax?, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.FunctionParameterClauseSyntax {
  @available(*, deprecated, message: "Use an initializer with parameters argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), unexpectedBetweenLeftParenAndParameterList: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenParameterListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.FunctionParameterListBuilder parameterListBuilder: () throws -> SwiftSyntax.FunctionParameterListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.GenericArgumentClauseSyntax {
  @available(*, deprecated, message: "Use an initializer with leftAngle, rightAngle argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftAngleBracket: SwiftSyntax.TokenSyntax = .leftAngleToken(), unexpectedBetweenLeftAngleBracketAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentsAndRightAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightAngleBracket: SwiftSyntax.TokenSyntax = .rightAngleToken(), unexpectedAfterRightAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.GenericArgumentListBuilder argumentsBuilder: () throws -> SwiftSyntax.GenericArgumentListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.GenericParameterClauseSyntax {
  @available(*, deprecated, message: "Use an initializer with leftAngle, parameters, rightAngle argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftAngleBracket: SwiftSyntax.TokenSyntax = .leftAngleToken(), unexpectedBetweenLeftAngleBracketAndGenericParameterList: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenGenericParameterListAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndRightAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightAngleBracket: SwiftSyntax.TokenSyntax = .rightAngleToken(), unexpectedAfterRightAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.GenericParameterListBuilder genericParameterListBuilder: () throws -> SwiftSyntax.GenericParameterListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.GenericWhereClauseSyntax {
  @available(*, deprecated, message: "Use an initializer with requirements argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeWhereKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, whereKeyword: SwiftSyntax.TokenSyntax = .keyword(.where), unexpectedBetweenWhereKeywordAndRequirementList: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterRequirementList: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.GenericRequirementListBuilder requirementListBuilder: () throws -> SwiftSyntax.GenericRequirementListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.InheritanceClauseSyntax {
  @available(*, deprecated, message: "Use an initializer with inheritedTypes argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), unexpectedBetweenColonAndInheritedTypeCollection: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterInheritedTypeCollection: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.InheritedTypeListBuilder inheritedTypeCollectionBuilder: () throws -> SwiftSyntax.InheritedTypeListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.KeyPathSubscriptComponentSyntax {
  @available(*, deprecated, message: "Use an initializer with leftSquare, arguments, rightSquare argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBracket: SwiftSyntax.TokenSyntax = .leftSquareToken(), unexpectedBetweenLeftBracketAndArgumentList: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentListAndRightBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBracket: SwiftSyntax.TokenSyntax = .rightSquareToken(), unexpectedAfterRightBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder argumentListBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.MacroExpansionDeclSyntax {
  @available(*, deprecated, message: "Use an initializer with pound, macroName, genericArgumentClause, arguments argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndPoundToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, poundToken: SwiftSyntax.TokenSyntax = .poundToken(), unexpectedBetweenPoundTokenAndMacro: SwiftSyntax.UnexpectedNodesSyntax? = nil, macro: SwiftSyntax.TokenSyntax, unexpectedBetweenMacroAndGenericArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericArguments: SwiftSyntax.GenericArgumentClauseSyntax? = nil, unexpectedBetweenGenericArgumentsAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenLeftParenAndArgumentList: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenRightParenAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder argumentListBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.MacroExpansionExprSyntax {
  @available(*, deprecated, message: "Use an initializer with pound, macroName, genericArgumentClause, arguments argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforePoundToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, poundToken: SwiftSyntax.TokenSyntax = .poundToken(), unexpectedBetweenPoundTokenAndMacro: SwiftSyntax.UnexpectedNodesSyntax? = nil, macro: SwiftSyntax.TokenSyntax, unexpectedBetweenMacroAndGenericArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericArguments: SwiftSyntax.GenericArgumentClauseSyntax? = nil, unexpectedBetweenGenericArgumentsAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenLeftParenAndArgumentList: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenRightParenAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder argumentListBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ProtocolDeclSyntax {
  @available(*, deprecated, message: "Use an initializer with name argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndProtocolKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, protocolKeyword: SwiftSyntax.TokenSyntax = .keyword(.protocol), unexpectedBetweenProtocolKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, unexpectedBetweenIdentifierAndPrimaryAssociatedTypeClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, primaryAssociatedTypeClause: SwiftSyntax.PrimaryAssociatedTypeClauseSyntax? = nil, unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder memberBlockBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.SourceFileSyntax {
  @available(*, deprecated, message: "Use an initializer with endOfFileToken argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeShebang: SwiftSyntax.UnexpectedNodesSyntax? = nil, shebang: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenShebangAndStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenStatementsAndEofToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, eofToken: SwiftSyntax.TokenSyntax = .endOfFileToken(), unexpectedAfterEofToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder statementsBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.StructDeclSyntax {
  @available(*, deprecated, message: "Use an initializer with name argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndStructKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, structKeyword: SwiftSyntax.TokenSyntax = .keyword(.struct), unexpectedBetweenStructKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, unexpectedBetweenIdentifierAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder memberBlockBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.SubscriptCallExprSyntax {
  @available(*, deprecated, message: "Use an initializer with leftSquare, arguments, rightSquare argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeCalledExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, calledExpression: any SwiftSyntax.ExprSyntaxProtocol, unexpectedBetweenCalledExpressionAndLeftBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBracket: SwiftSyntax.TokenSyntax = .leftSquareToken(), unexpectedBetweenLeftBracketAndArgumentList: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentListAndRightBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBracket: SwiftSyntax.TokenSyntax = .rightSquareToken(), unexpectedBetweenRightBracketAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder argumentListBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.SwitchCaseSyntax {
  @available(*, deprecated, message: "Use an initializer with attribute argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeUnknownAttr: SwiftSyntax.UnexpectedNodesSyntax? = nil, unknownAttr: SwiftSyntax.AttributeSyntax? = nil, unexpectedBetweenUnknownAttrAndLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, label: SwiftSyntax.SwitchCaseSyntax.Label, unexpectedBetweenLabelAndStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder statementsBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.SwitchExprSyntax {
  @available(*, deprecated, message: "Use an initializer with subject argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeSwitchKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, switchKeyword: SwiftSyntax.TokenSyntax = .keyword(.switch), unexpectedBetweenSwitchKeywordAndExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: any SwiftSyntax.ExprSyntaxProtocol, unexpectedBetweenExpressionAndLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBrace: SwiftSyntax.TokenSyntax = .leftBraceToken(), unexpectedBetweenLeftBraceAndCases: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenCasesAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBrace: SwiftSyntax.TokenSyntax = .rightBraceToken(), unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.SwitchCaseListBuilder casesBuilder: () throws -> SwiftSyntax.SwitchCaseListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.TupleExprSyntax {
  @available(*, deprecated, message: "Use an initializer with elements argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), unexpectedBetweenLeftParenAndElementList: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenElementListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder elementListBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.VariableDeclSyntax {
  @available(*, deprecated, message: "Use an initializer with bindingSpecifier argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndBindingKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, bindingKeyword: SwiftSyntax.TokenSyntax, unexpectedBetweenBindingKeywordAndBindings: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBindings: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.PatternBindingListBuilder bindingsBuilder: () throws -> SwiftSyntax.PatternBindingListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.AccessorBlockSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.AccessorBlockSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.AccessorDeclSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.AccessorDeclSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.AttributeSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.AttributeSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.CatchClauseSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.CatchClauseSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.ClosureParameterSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.ClosureParameterSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.CodeBlockItemSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.CodeBlockItemSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.CodeBlockSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.CodeBlockSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.DeclSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.DeclSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.EnumCaseParameterSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.EnumCaseParameterSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.ExprSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.ExprSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.FunctionParameterSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.FunctionParameterSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.GenericParameterClauseSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.GenericParameterClauseSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.MemberBlockSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.MemberBlockSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.PatternSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.PatternSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.SourceFileSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.SourceFileSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.StmtSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.StmtSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.SwitchCaseSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.SwitchCaseSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.TypeSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.TypeSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.VersionTupleSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.VersionTupleSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.AccessorDeclListSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.AccessorDeclListSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.AttributeListSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.AttributeListSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.CodeBlockItemListSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.CodeBlockItemListSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.MemberBlockItemListSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
}
extension SwiftSyntax.MemberBlockItemListSyntax : Swift.ExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
