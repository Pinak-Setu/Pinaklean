name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  DEVELOPER_DIR: /Applications/Xcode_15.0.app/Contents/Developer

jobs:
  # üîç Static Analysis & Security Audit
  security-audit:
    name: Security Audit & Static Analysis
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "15.0"

      - name: Cache SwiftPM dependencies
        uses: actions/cache@v3
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Run SwiftLint
        run: |
          brew install swiftlint
          swiftlint --strict --reporter github-actions-logging

      - name: Security Audit with CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: swift

      - name: Autobuild
        run: swift build --configuration release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run Shell Script Security Audit
        run: |
          chmod +x lib/security_audit.sh
          ./lib/security_audit.sh --comprehensive

  # üß™ Unit Tests & Integration Tests
  test:
    name: Unit & Integration Tests
    runs-on: macos-latest
    needs: security-audit
    strategy:
      matrix:
        xcode: ["15.0", "14.3"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Xcode ${{ matrix.xcode }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ matrix.xcode }}

      - name: Cache SwiftPM dependencies
        uses: actions/cache@v3
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Install test dependencies
        run: |
          brew install quick-nimble
          bundle install

      - name: Run Unit Tests
        run: |
          swift test --configuration debug --enable-code-coverage --parallel
        env:
          CI: true

      - name: Generate Test Coverage Report
        run: |
          xcrun llvm-cov export -format="lcov" .build/debug/PinakleanPackageTests.xctest/Contents/MacOS/PinakleanPackageTests -instr-profile .build/debug/codecov/default.profdata > coverage.lcov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.lcov
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: Run Integration Tests
        run: |
          # Create test environment
          mkdir -p /tmp/test_artifacts
          echo "test content" > /tmp/test_artifacts/test1.txt
          mkdir -p /tmp/test_artifacts/test_dir
          echo "test content 2" > /tmp/test_artifacts/test_dir/test2.txt

          # Run integration tests
          swift test --filter IntegrationTests --configuration debug

      - name: Run Performance Tests
        run: |
          swift test --filter PerformanceTests --configuration release

      - name: Performance Benchmarking
        run: |
          # Run performance benchmarks
          echo "Running performance benchmarks..."
          time swift build --configuration release

          # Measure startup time
          echo "Measuring CLI startup time..."
          time for i in {1..10}; do
            timeout 5 ./bin/pinaklean --help > /dev/null
          done

          # Memory usage test
          echo "Testing memory usage..."
          /usr/bin/time -l ./bin/pinaklean --dry-run --categories userCaches 2>&1 | grep "maximum resident set size"

      - name: Upload Performance Metrics
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-metrics-${{ matrix.xcode }}
          path: |
            performance_results.txt

      - name: Archive Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.xcode }}
          path: |
            .build/debug/**/*.xctest
            *.lcov
            test_output.log

  # üîí Security Tests
  security-tests:
    name: Security & Guardrail Tests
    runs-on: macos-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "15.0"

      - name: Run Security Tests
        run: |
          swift test --filter SecurityTests --configuration debug

      - name: File Deletion Guardrail Test
        run: |
          # Test that system files are protected
          echo "Testing file deletion guardrails..."

          # Create test files in safe locations
          mkdir -p /tmp/pinaklean_test
          echo "safe content" > /tmp/pinaklean_test/safe_file.txt

          # Create mock critical files to test protection
          mkdir -p /tmp/mock_system/System/Library
          echo "critical content" > /tmp/mock_system/System/Library/test.txt

          # Test CLI guardrails with aggressive mode
          ./bin/pinaklean --dry-run --aggressive --test-mode

          # Verify system files are not touched
          if [ -f "/tmp/mock_system/System/Library/test.txt" ]; then
            echo "‚úÖ Mock system files are protected"
          else
            echo "‚ùå CRITICAL: Mock system files were deleted!"
            exit 1
          fi

          # Additional safety checks
          echo "Testing path traversal protection..."
          # Attempt path traversal attack (should be blocked)
          ./bin/pinaklean --categories "../../../../etc" --dry-run 2>&1 || echo "‚úÖ Path traversal blocked"

      - name: Code Security Analysis
        run: |
          echo "Running advanced security analysis..."

          # Check for hardcoded secrets
          if grep -r -i "password\|secret\|token\|key.*=\|api.*key" --include="*.swift" --exclude-dir=".build" . | grep -v "test\|example\|placeholder\|public"; then
            echo "‚ùå Found potential hardcoded secrets"
            exit 1
          fi

          # Check for dangerous functions
          if grep -r "system(\|popen(\|execve(" --include="*.swift" .; then
            echo "‚ùå Found dangerous system calls"
            exit 1
          fi

          # Check for debug code in production
          if grep -r "print(\|NSLog(\|os_log.*debug\|assert(" --include="*.swift" --exclude="**/Tests/**" . | head -10; then
            echo "‚ö†Ô∏è Found debug statements in non-test code"
          fi

      - name: Dependency Security Audit
        run: |
          echo "Auditing dependencies for vulnerabilities..."

          # Check for known vulnerable dependencies
          swift package show-dependencies

          # Run security audit on dependencies
          if command -v safety >/dev/null 2>&1; then
            safety check
          fi

          # Check for outdated dependencies
          if swift package update --dry-run | grep -q "would change"; then
            echo "‚ö†Ô∏è Dependencies may be outdated"
          fi

      - name: Audit Configuration Files
        run: |
          # Check for hardcoded secrets
          if grep -r "password\|secret\|token" --include="*.swift" --include="*.sh" . | grep -v "test\|example\|placeholder"; then
            echo "‚ùå Found potential hardcoded secrets"
            exit 1
          fi

          # Check for debug code in production
          if grep -r "print(\|NSLog\|os_log" --include="*.swift" . | grep -v "debug\|test"; then
            echo "‚ùå Found debug code in production files"
            exit 1
          fi

  # üèóÔ∏è Build & Package
  build:
    name: Build & Package
    runs-on: macos-latest
    needs: [test, security-tests]
    strategy:
      matrix:
        configuration: [debug, release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "15.0"

      - name: Cache SwiftPM dependencies
        uses: actions/cache@v3
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Build CLI Tool
        run: |
          swift build --configuration ${{ matrix.configuration }}
          cp .build/${{ matrix.configuration }}/pinaklean-cli bin/pinaklean

      - name: Build GUI Application
        run: |
          xcodebuild -project Pinaklean.xcodeproj -scheme Pinaklean -configuration ${{ matrix.configuration }} build

      - name: Package CLI Binary
        run: |
          mkdir -p dist
          cp bin/pinaklean dist/
          cp README.md dist/
          cp LICENSE dist/
          cd dist && tar -czf pinaklean-${{ matrix.configuration }}.tar.gz *

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pinaklean-${{ matrix.configuration }}
          path: |
            dist/
            .build/${{ matrix.configuration }}/

  # üìä Quality Assurance
  quality-gate:
    name: Quality Gate
    runs-on: macos-latest
    needs: [security-audit, test, security-tests, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test coverage
        uses: actions/download-artifact@v3
        with:
          name: test-results-15.0

      - name: Check Test Coverage
        run: |
          # Check if coverage report exists
          if [ ! -f "coverage.lcov" ]; then
            echo "‚ùå Coverage report not found"
            exit 1
          fi

          # Parse coverage percentage (simplified check)
          COVERAGE=$(grep -o "LF:[0-9]*" coverage.lcov | head -1 | cut -d: -f2)
          if [ "$COVERAGE" -lt 80 ]; then
            echo "‚ùå Test coverage too low: $COVERAGE%"
            exit 1
          fi

          echo "‚úÖ Test coverage acceptable: $COVERAGE%"

          # Additional coverage checks
          echo "Checking coverage for critical components..."

          # Check SecurityAuditor coverage
          SECURITY_COVERAGE=$(grep -A 20 "SecurityAuditor" coverage.lcov | grep -o "LF:[0-9]*" | head -1 | cut -d: -f2 || echo "0")
          if [ "$SECURITY_COVERAGE" -lt 90 ]; then
            echo "‚ö†Ô∏è SecurityAuditor coverage low: $SECURITY_COVERAGE%"
          fi

          # Check SmartDetector coverage
          SMART_COVERAGE=$(grep -A 20 "SmartDetector" coverage.lcov | grep -o "LF:[0-9]*" | head -1 | cut -d: -f2 || echo "0")
          if [ "$SMART_COVERAGE" -lt 90 ]; then
            echo "‚ö†Ô∏è SmartDetector coverage low: $SMART_COVERAGE%"
          fi

          # Check ParallelProcessor coverage
          PARALLEL_COVERAGE=$(grep -A 20 "ParallelProcessor" coverage.lcov | grep -o "LF:[0-9]*" | head -1 | cut -d: -f2 || echo "0")
          if [ "$PARALLEL_COVERAGE" -lt 85 ]; then
            echo "‚ö†Ô∏è ParallelProcessor coverage low: $PARALLEL_COVERAGE%"
          fi

      - name: Performance Regression Check
        run: |
          echo "Checking for performance regressions..."

          # Download previous performance metrics if available
          if [ -f "previous_performance.json" ]; then
            # Compare with current metrics
            echo "Comparing performance metrics..."

            # Check for significant regressions (>10% slower)
            # This would require storing previous run metrics
          else
            echo "No previous performance data available"
          fi

      - name: Accessibility & Internationalization Check
        run: |
          echo "Running accessibility and i18n checks..."

          # Check for accessibility labels
          if grep -r "accessibilityLabel\|accessibilityHint" --include="*.swift" --exclude="**/Tests/**" . > /dev/null; then
            echo "‚úÖ Found accessibility labels"
          else
            echo "‚ö†Ô∏è No accessibility labels found"
          fi

          # Check for internationalization
          if grep -r "NSLocalizedString\|LocalizedStringKey" --include="*.swift" --exclude="**/Tests/**" . > /dev/null; then
            echo "‚úÖ Found internationalization"
          else
            echo "‚ö†Ô∏è No internationalization found"
          fi

      - name: Validate Documentation
        run: |
          # Check if README is up to date
          if [ ! -f "README.md" ]; then
            echo "‚ùå README.md missing"
            exit 1
          fi

          # Check if docs are current (simplified check)
          if ! grep -q "Pinaklean" README.md; then
            echo "‚ùå README appears outdated"
            exit 1
          fi

      - name: Final Quality Check
        run: |
          echo "üéâ All quality gates passed!"
          echo "‚úÖ Security audit: PASSED"
          echo "‚úÖ Unit tests: PASSED"
          echo "‚úÖ Integration tests: PASSED"
          echo "‚úÖ Security tests: PASSED"
          echo "‚úÖ Build: PASSED"
          echo "‚úÖ Test coverage: PASSED"
          echo "‚úÖ Documentation: PASSED"

  # üöÄ Deployment (only on main branch)
  deploy:
    name: Deploy Release
    runs-on: macos-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: pinaklean-release

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/pinaklean-release.tar.gz
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Homebrew (if applicable)
        run: |
          # This would integrate with Homebrew tap
          echo "Homebrew deployment would happen here"
          # brew bump-formula-pr --url=https://github.com/Pinak-Setu/Pinaklean/releases/download/${{ github.event.release.tag_name }}/pinaklean-release.tar.gz pinaklean

  # üìù Documentation Update
  docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update API Documentation
        run: |
          # Generate API docs using Swift-DocC
          echo "API documentation would be generated here"

      - name: Update README with latest info
        run: |
          # Update version numbers, badges, etc.
          sed -i "s/version-.*/version-${{ github.sha }}/" README.md

      - name: Commit documentation changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "docs: update documentation [skip ci]" || echo "No changes to commit"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main

  # üîî Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [quality-gate, deploy, docs]
    if: always()
    steps:
      - name: Send Discord notification
        uses: Ilshidur/action-discord@master
        with:
          args: |
            **Pinaklean CI/CD ${{ job.status == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }}**

            Branch: `${{ github.ref_name }}`
            Commit: `${{ github.sha }}`
            Author: ${{ github.actor }}

            üìä **Test Results:**
            - Security Audit: ${{ needs.security-audit.result == 'success' && '‚úÖ' || '‚ùå' }}
            - Unit Tests: ${{ needs.test.result == 'success' && '‚úÖ' || '‚ùå' }}
            - Integration Tests: ${{ needs.test.result == 'success' && '‚úÖ' || '‚ùå' }}
            - Security Tests: ${{ needs.security-tests.result == 'success' && '‚úÖ' || '‚ùå' }}
            - Build: ${{ needs.build.result == 'success' && '‚úÖ' || '‚ùå' }}

            üîó [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.24.0
        if: failure()
        with:
          payload: |
            {
              "text": "üö® Pinaklean CI/CD Failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Pinaklean CI/CD Pipeline Failed*\nBranch: `${{ github.ref_name }}`\nCommit: `${{ github.sha }}`\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

# Concurrent workflow management
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
