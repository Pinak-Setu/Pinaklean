// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.9 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-macosx13.0 -enable-objc-interop -enable-library-evolution -module-link-name SwiftDiagnostics -swift-version 5 -O -module-abi-name CompilerSwiftDiagnostics -module-name SwiftDiagnostics -package-name Toolchain
import Swift
import SwiftSyntax
import _Concurrency
import _SwiftConcurrencyShims
extension SwiftDiagnostics.Diagnostic {
  public init(node: some SyntaxProtocol, position: SwiftSyntax.AbsolutePosition? = nil, message: any SwiftDiagnostics.DiagnosticMessage, highlights: [SwiftSyntax.Syntax]? = nil, notes: [SwiftDiagnostics.Note] = [], fixIt: SwiftDiagnostics.FixIt)
}
extension SwiftDiagnostics.FixIt {
  public static func replace(message: any SwiftDiagnostics.FixItMessage, oldNode: some SyntaxProtocol, newNode: some SyntaxProtocol) -> SwiftDiagnostics.FixIt
  public static func replaceChild<Parent, Child>(message: any SwiftDiagnostics.FixItMessage, parent: Parent, replacingChildAt keyPath: any Swift.WritableKeyPath<Parent, Child?> & Swift.Sendable, with newChild: Child) -> SwiftDiagnostics.FixIt where Parent : SwiftSyntax.SyntaxProtocol, Child : SwiftSyntax.SyntaxProtocol
}
public struct Diagnostic : Swift.CustomDebugStringConvertible, Swift.Sendable {
  public let diagMessage: any SwiftDiagnostics.DiagnosticMessage
  public let node: SwiftSyntax.Syntax
  public let position: SwiftSyntax.AbsolutePosition
  public let highlights: [SwiftSyntax.Syntax]
  public let notes: [SwiftDiagnostics.Note]
  public let fixIts: [SwiftDiagnostics.FixIt]
  public init(node: some SyntaxProtocol, position: SwiftSyntax.AbsolutePosition? = nil, message: any SwiftDiagnostics.DiagnosticMessage, highlights: [SwiftSyntax.Syntax]? = nil, notes: [SwiftDiagnostics.Note] = [], fixIts: [SwiftDiagnostics.FixIt] = [])
  public var message: Swift.String {
    get
  }
  public var diagnosticID: SwiftDiagnostics.MessageID {
    get
  }
  public func location(converter: SwiftSyntax.SourceLocationConverter) -> SwiftSyntax.SourceLocation
  public var debugDescription: Swift.String {
    get
  }
}
public struct DiagnosticsError : Swift.Error, Swift.Sendable {
  public var diagnostics: [SwiftDiagnostics.Diagnostic]
  public init(diagnostics: [SwiftDiagnostics.Diagnostic])
}
extension Swift.Error {
  public func asDiagnostics(at node: some SyntaxProtocol) -> [SwiftDiagnostics.Diagnostic]
}
public struct DiagnosticsFormatter {
  public let contextSize: Swift.Int
  @available(*, deprecated, message: "Store the `colorize` property passed to the initializer instead")
  public var colorize: Swift.Bool {
    get
  }
  public init(contextSize: Swift.Int = 2, colorize: Swift.Bool = false)
  public static func annotatedSource(tree: some SyntaxProtocol, diags: [SwiftDiagnostics.Diagnostic], contextSize: Swift.Int = 2, colorize: Swift.Bool = false) -> Swift.String
  public func annotatedSource(tree: some SyntaxProtocol, diags: [SwiftDiagnostics.Diagnostic]) -> Swift.String
}
public protocol FixItMessage : Swift.Sendable {
  var message: Swift.String { get }
  var fixItID: SwiftDiagnostics.MessageID { get }
}
public protocol ReplacingChildData : Swift.Sendable {
  associatedtype Parent : SwiftSyntax.SyntaxProtocol
  associatedtype Child : SwiftSyntax.SyntaxProtocol
  var parent: Self.Parent { get }
  var newChild: Self.Child { get }
  var replacementRange: Swift.Range<SwiftSyntax.AbsolutePosition> { get }
}
public struct FixIt : Swift.Sendable {
  public enum Change : Swift.Sendable {
    case replace(oldNode: SwiftSyntax.Syntax, newNode: SwiftSyntax.Syntax)
    case replaceLeadingTrivia(token: SwiftSyntax.TokenSyntax, newTrivia: SwiftSyntax.Trivia)
    case replaceTrailingTrivia(token: SwiftSyntax.TokenSyntax, newTrivia: SwiftSyntax.Trivia)
    case replaceChild(data: any SwiftDiagnostics.ReplacingChildData)
  }
  public let message: any SwiftDiagnostics.FixItMessage
  public let changes: [SwiftDiagnostics.FixIt.Change]
  public init(message: any SwiftDiagnostics.FixItMessage, changes: [SwiftDiagnostics.FixIt.Change])
}
extension SwiftDiagnostics.FixIt {
  public var edits: [SwiftSyntax.SourceEdit] {
    get
  }
}
public struct GroupedDiagnostics {
  public struct SourceFileID : Swift.Equatable, Swift.Hashable {
    public static func == (a: SwiftDiagnostics.GroupedDiagnostics.SourceFileID, b: SwiftDiagnostics.GroupedDiagnostics.SourceFileID) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init()
  @discardableResult
  public mutating func addSourceFile(tree: some SyntaxProtocol, sourceLocationConverter: SwiftSyntax.SourceLocationConverter? = nil, displayName: Swift.String, parent: (SwiftDiagnostics.GroupedDiagnostics.SourceFileID, SwiftSyntax.AbsolutePosition)? = nil, diagnostics: [SwiftDiagnostics.Diagnostic] = []) -> SwiftDiagnostics.GroupedDiagnostics.SourceFileID
  public mutating func addDiagnostic(_ diagnostic: SwiftDiagnostics.Diagnostic, in knownSourceFileID: SwiftDiagnostics.GroupedDiagnostics.SourceFileID? = nil)
}
extension SwiftDiagnostics.DiagnosticsFormatter {
  public func annotateSources(in group: SwiftDiagnostics.GroupedDiagnostics) -> Swift.String
  public static func annotateSources(in group: SwiftDiagnostics.GroupedDiagnostics, contextSize: Swift.Int = 2, colorize: Swift.Bool = false) -> Swift.String
}
public struct MessageID : Swift.Hashable, Swift.Sendable {
  public init(domain: Swift.String, id: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftDiagnostics.MessageID, b: SwiftDiagnostics.MessageID) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum DiagnosticSeverity : Swift.Sendable {
  case error
  case warning
  case note
  case remark
  public static func == (a: SwiftDiagnostics.DiagnosticSeverity, b: SwiftDiagnostics.DiagnosticSeverity) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol DiagnosticMessage : Swift.Sendable {
  var message: Swift.String { get }
  var diagnosticID: SwiftDiagnostics.MessageID { get }
  var severity: SwiftDiagnostics.DiagnosticSeverity { get }
}
public protocol NoteMessage : Swift.Sendable {
  var message: Swift.String { get }
  var noteID: SwiftDiagnostics.MessageID { get }
}
extension SwiftDiagnostics.NoteMessage {
  @available(*, deprecated, renamed: "noteID", message: "Use noteID instead.")
  public var fixItID: SwiftDiagnostics.MessageID {
    get
  }
}
public struct Note : Swift.CustomDebugStringConvertible, Swift.Sendable {
  public let node: SwiftSyntax.Syntax
  public let position: SwiftSyntax.AbsolutePosition
  public let noteMessage: any SwiftDiagnostics.NoteMessage
  public init(node: SwiftSyntax.Syntax, position: SwiftSyntax.AbsolutePosition? = nil, message: any SwiftDiagnostics.NoteMessage)
  public var message: Swift.String {
    get
  }
  public func location(converter: SwiftSyntax.SourceLocationConverter) -> SwiftSyntax.SourceLocation
  public var debugDescription: Swift.String {
    get
  }
}
extension SwiftDiagnostics.DiagnosticSeverity : Swift.Equatable {}
extension SwiftDiagnostics.DiagnosticSeverity : Swift.Hashable {}
