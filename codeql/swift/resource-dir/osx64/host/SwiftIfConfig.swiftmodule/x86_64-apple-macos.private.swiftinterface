// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.9 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-macosx13.0 -enable-objc-interop -enable-library-evolution -module-link-name SwiftIfConfig -swift-version 5 -O -module-abi-name CompilerSwiftIfConfig -module-name SwiftIfConfig -package-name Toolchain
import Swift
import SwiftDiagnostics
import SwiftOperators
import SwiftSyntax
import SwiftSyntaxBuilder
import _Concurrency
import _SwiftConcurrencyShims
open class ActiveSyntaxVisitor : SwiftSyntax.SyntaxVisitor {
  public var diagnostics: [SwiftDiagnostics.Diagnostic] {
    get
  }
  public init(viewMode: SwiftSyntax.SyntaxTreeViewMode, configuration: some BuildConfiguration)
  public init(viewMode: SwiftSyntax.SyntaxTreeViewMode, configuredRegions: SwiftIfConfig.ConfiguredRegions)
  override open func visit(_ node: SwiftSyntax.IfConfigDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  @objc deinit
}
open class ActiveSyntaxAnyVisitor : SwiftSyntax.SyntaxAnyVisitor {
  public var diagnostics: [SwiftDiagnostics.Diagnostic] {
    get
  }
  public init(viewMode: SwiftSyntax.SyntaxTreeViewMode, configuration: some BuildConfiguration)
  public init(viewMode: SwiftSyntax.SyntaxTreeViewMode, configuredRegions: SwiftIfConfig.ConfiguredRegions)
  override open func visit(_ node: SwiftSyntax.IfConfigDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  @objc deinit
}
extension SwiftSyntax.SyntaxProtocol {
  public func removingInactive(in configuration: some BuildConfiguration) -> (result: SwiftSyntax.Syntax, diagnostics: [SwiftDiagnostics.Diagnostic])
  @_spi(Compiler) public func removingInactive(in configuration: some BuildConfiguration, retainFeatureCheckIfConfigs: Swift.Bool) -> (result: SwiftSyntax.Syntax, diagnostics: [SwiftDiagnostics.Diagnostic])
}
extension SwiftIfConfig.ConfiguredRegions {
  public func removingInactive(from node: some SyntaxProtocol) -> SwiftSyntax.Syntax
  @_spi(Compiler) public func removingInactive(from node: some SyntaxProtocol, retainFeatureCheckIfConfigs: Swift.Bool) -> SwiftSyntax.Syntax
}
extension SwiftSyntax.SyntaxProtocol {
  @_spi(Compiler) public var descriptionWithoutCommentsAndSourceLocations: Swift.String {
    get
  }
}
public enum Endianness : Swift.String {
  case little
  case big
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CanImportVersion {
  case unversioned
  case version(SwiftIfConfig.VersionTuple)
  case underlyingVersion(SwiftIfConfig.VersionTuple)
}
public protocol BuildConfiguration {
  func isCustomConditionSet(name: Swift.String) throws -> Swift.Bool
  func hasFeature(name: Swift.String) throws -> Swift.Bool
  func hasAttribute(name: Swift.String) throws -> Swift.Bool
  func canImport(importPath: [(SwiftSyntax.TokenSyntax, Swift.String)], version: SwiftIfConfig.CanImportVersion) throws -> Swift.Bool
  func isActiveTargetOS(name: Swift.String) throws -> Swift.Bool
  func isActiveTargetArchitecture(name: Swift.String) throws -> Swift.Bool
  func isActiveTargetEnvironment(name: Swift.String) throws -> Swift.Bool
  func isActiveTargetRuntime(name: Swift.String) throws -> Swift.Bool
  func isActiveTargetPointerAuthentication(name: Swift.String) throws -> Swift.Bool
  var targetPointerBitWidth: Swift.Int { get }
  var targetAtomicBitWidths: [Swift.Int] { get }
  var endianness: SwiftIfConfig.Endianness { get }
  var languageVersion: SwiftIfConfig.VersionTuple { get }
  var compilerVersion: SwiftIfConfig.VersionTuple { get }
}
public struct ConfiguredRegions {
  public let diagnostics: [SwiftDiagnostics.Diagnostic]
  public func isActive(_ node: some SyntaxProtocol) -> SwiftIfConfig.IfConfigRegionState
  public func activeClause(for node: SwiftSyntax.IfConfigDeclSyntax) -> SwiftSyntax.IfConfigClauseSyntax?
}
extension SwiftIfConfig.ConfiguredRegions : Swift.RandomAccessCollection {
  public typealias Element = (ifClause: SwiftSyntax.IfConfigClauseSyntax, state: SwiftIfConfig.IfConfigRegionState)
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> SwiftIfConfig.ConfiguredRegions.Element {
    get
  }
  public typealias Index = Swift.Int
  public typealias Indices = Swift.Range<Swift.Int>
  public typealias Iterator = Swift.IndexingIterator<SwiftIfConfig.ConfiguredRegions>
  public typealias SubSequence = Swift.Slice<SwiftIfConfig.ConfiguredRegions>
}
extension SwiftIfConfig.ConfiguredRegions : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension SwiftSyntax.SyntaxProtocol {
  public func configuredRegions(in configuration: some BuildConfiguration) -> SwiftIfConfig.ConfiguredRegions
}
public enum IfConfigRegionState {
  case unparsed
  case inactive
  case active
  public static func evaluating(_ condition: some ExprSyntaxProtocol, in configuration: some BuildConfiguration) -> (state: SwiftIfConfig.IfConfigRegionState, syntaxErrorsAllowed: Swift.Bool, diagnostics: [SwiftDiagnostics.Diagnostic])
  public static func == (a: SwiftIfConfig.IfConfigRegionState, b: SwiftIfConfig.IfConfigRegionState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.IfConfigDeclSyntax {
  public func activeClause(in configuration: some BuildConfiguration) -> (clause: SwiftSyntax.IfConfigClauseSyntax?, diagnostics: [SwiftDiagnostics.Diagnostic])
}
extension SwiftSyntax.IfConfigClauseSyntax {
  @_spi(Compiler) public static func syntaxErrorsAllowed(_ condition: some ExprSyntaxProtocol) -> (syntaxErrorsAllowed: Swift.Bool, diagnostics: [SwiftDiagnostics.Diagnostic])
}
extension SwiftSyntax.SyntaxProtocol {
  public func isActive(in configuration: some BuildConfiguration) -> (state: SwiftIfConfig.IfConfigRegionState, diagnostics: [SwiftDiagnostics.Diagnostic])
}
public struct VersionTuple : Swift.Sendable {
  public var components: [Swift.Int]
  public init(components: [Swift.Int])
  public init(_ firstComponent: Swift.Int, _ remainingComponents: Swift.Int...)
  public init?(parsing string: Swift.String)
}
extension SwiftIfConfig.VersionTuple : Swift.Equatable, Swift.Hashable {
  public static func == (a: SwiftIfConfig.VersionTuple, b: SwiftIfConfig.VersionTuple) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftIfConfig.VersionTuple : Swift.Comparable {
  public static func < (lhs: SwiftIfConfig.VersionTuple, rhs: SwiftIfConfig.VersionTuple) -> Swift.Bool
}
extension SwiftIfConfig.VersionTuple : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SwiftIfConfig.Endianness : Swift.Equatable {}
extension SwiftIfConfig.Endianness : Swift.Hashable {}
extension SwiftIfConfig.Endianness : Swift.RawRepresentable {}
extension SwiftIfConfig.IfConfigRegionState : Swift.Equatable {}
extension SwiftIfConfig.IfConfigRegionState : Swift.Hashable {}
